
1. Agregações:
----------------
1.1. Contar o número total de nós no grafo:
MATCH (n) 
RETURN count(n) AS TotalNodes;

1.2. Somar o peso das arestas em todo o grafo:
MATCH ()-[r]->() 
RETURN sum(r.weight) AS TotalWeight;

1.3. Encontrar a média de idade dos nós (se aplicável):
MATCH (n:Person) 
RETURN avg(n.age) AS AverageAge;

1.4. Obter o maior valor de centralidade entre os nós:
MATCH (n) 
RETURN max(n.centrality) AS MaxCentrality;

1.5. Contar o número de arestas conectadas a cada nó:
MATCH (n)-[r]->()
RETURN n.name, count(r) AS EdgeCount
ORDER BY EdgeCount DESC;


2. Funções matemáticas:
----------------
2.1. Calcular o quadrado do valor de centralidade de cada nó:
MATCH (n)
RETURN n.name, n.centrality, n.centrality^2 AS CentralitySquared;

2.2. Obter o valor absoluto das centralidades negativas (se houver):
MATCH (n)
RETURN n.name, n.centrality, abs(n.centrality) AS AbsoluteCentrality;

2.3. Arredondar o valor de centralidade para duas casas decimais:
MATCH (n)
RETURN n.name, round(n.centrality, 2) AS RoundedCentrality;

2.4. Calcular a raiz quadrada do valor de centralidade de cada nó:
MATCH (n)
RETURN n.name, sqrt(n.centrality) AS CentralitySqrt;

2.5. Calcular o logaritmo natural (ln) do valor de centralidade dos nós:
MATCH (n)
RETURN n.name, log(n.centrality) AS CentralityLog;


3. Funções de String:
----------------
3.1. Converter o nome dos nós para letras maiúsculas:
MATCH (n)
RETURN n.name, toUpper(n.name) AS UpperName;

3.2. Converter o nome dos nós para letras minúsculas:
MATCH (n)
RETURN n.name, toLower(n.name) AS LowerName;

3.3. Verificar se o nome dos nós contém um determinado substring (ex: "John"):
MATCH (n)
WHERE n.name CONTAINS 'John'
RETURN n.name;

3.4. Retornar o comprimento do nome dos nós:
MATCH (n)
RETURN n.name, length(n.name) AS NameLength;

3.5. Concatenar o nome dos nós com uma string adicional:
MATCH (n)
RETURN n.name, n.name + ' - Node' AS ConcatenatedName;
